import { app, BrowserWindow, Tray, Menu, nativeImage } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray: Tray | null = null;
let mainWindow: BrowserWindow | null = null;

const createTray = (): void => {
  // Create tray icon - using a default fire emoji for now
  const icon = nativeImage.createFromNamedImage('NSImageNameStatusAvailable').resize({ width: 16, height: 16 });
  tray = new Tray(icon);
  
  // Set tooltip
  tray.setToolTip('Killall-Tofu - Infrastructure Auto-Destroyer');
  
  // Create context menu
  const contextMenu = Menu.buildFromTemplate([
    { 
      label: 'Active Infrastructure', 
      type: 'normal',
      enabled: false
    },
    { type: 'separator' },
    { 
      label: 'No active projects', 
      type: 'normal',
      enabled: false
    },
    { type: 'separator' },
    { 
      label: 'Dashboard', 
      type: 'normal',
      click: (): void => {
        if (mainWindow) {
          mainWindow.show();
          mainWindow.focus();
        } else {
          createWindow();
        }
      }
    },
    { 
      label: 'Settings', 
      type: 'normal',
      click: (): void => {
        // TODO: Create separate settings window in future
        if (mainWindow) {
          mainWindow.show();
          mainWindow.focus();
        } else {
          createWindow();
        }
      }
    },
    { type: 'separator' },
    { 
      label: 'Quit Killall-Tofu', 
      type: 'normal',
      click: (): void => {
        app.quit();
      }
    }
  ]);
  
  tray.setContextMenu(contextMenu);
  
  // Handle tray clicks - show context menu instead of auto-opening dashboard
  tray.on('click', () => {
    tray?.popUpContextMenu();
  });
};

const createWindow = (): void => {
  if (mainWindow) {
    mainWindow.show();
    mainWindow.focus();
    return;
  }

  // Create the browser window for settings/management
  mainWindow = new BrowserWindow({
    height: 400,
    width: 350,
    resizable: false,
    minimizable: false,
    maximizable: false,
    fullscreenable: false,
    show: false,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    skipTaskbar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // Load the index.html of the app
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Position window near tray icon
  mainWindow.once('ready-to-show', () => {
    if (mainWindow && tray) {
      const trayBounds = tray.getBounds();
      const windowBounds = mainWindow.getBounds();
      
      // Position window below the tray icon (macOS menu bar)
      const x = Math.round(trayBounds.x + (trayBounds.width / 2) - (windowBounds.width / 2));
      const y = Math.round(trayBounds.y + trayBounds.height + 4);
      
      mainWindow.setPosition(x, y, false);
      mainWindow.show();
    }
  });

  // Handle window closed
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // Hide window when it loses focus
  mainWindow.on('blur', () => {
    if (mainWindow && !mainWindow.webContents.isDevToolsOpened()) {
      mainWindow.hide();
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.whenReady().then(() => {
  // Don't show in dock on macOS
  if (process.platform === 'darwin' && app.dock) {
    app.dock.hide();
  }
  
  createTray();
});

// Quit when all windows are closed, except on macOS where we want to keep the tray
app.on('window-all-closed', () => {
  // On macOS, keep the app running even when all windows are closed
  // The tray icon allows users to interact with the app
  if (process.platform !== 'darwin') {
    // On other platforms, keep running for tray functionality
  }
});

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked, but for a menu bar app we handle this via tray
  createWindow();
});

// Prevent multiple instances
const gotTheLock = app.requestSingleInstanceLock();
if (!gotTheLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    // Someone tried to run a second instance, focus our window instead
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore();
      mainWindow.focus();
    } else {
      createWindow();
    }
  });
}
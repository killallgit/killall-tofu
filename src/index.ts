import * as path from 'path';

import { app, BrowserWindow, Tray, Menu, nativeImage, ipcMain, dialog, shell } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Application state manager using functional approach
interface AppState {
  tray: Tray | null;
  mainWindow: BrowserWindow | null;
}

// Create application state factory
const createAppState = (): AppState => ({
  tray: null,
  mainWindow: null,
});

// Create window factory function
const createWindowFactory = (state: AppState) => (): BrowserWindow => {
  if (state.mainWindow) {
    state.mainWindow.show();
    state.mainWindow.focus();
    return state.mainWindow;
  }

  // Create the browser window for settings/management
  const window = new BrowserWindow({
    height: 400,
    width: 350,
    resizable: false,
    minimizable: false,
    maximizable: false,
    fullscreenable: false,
    show: false,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    skipTaskbar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // Load the index.html of the app
  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Position window near tray icon
  window.once('ready-to-show', () => {
    if (window && state.tray) {
      const trayBounds = state.tray.getBounds();
      const windowBounds = window.getBounds();
      
      // Position window below the tray icon (macOS menu bar)
      const x = Math.round(trayBounds.x + (trayBounds.width / 2) - (windowBounds.width / 2));
      const y = Math.round(trayBounds.y + trayBounds.height + 4);
      
      window.setPosition(x, y, false);
      window.show();
    }
  });

  // Handle window closed
  window.on('closed', () => {
    state.mainWindow = null;
  });

  // Hide window when it loses focus
  window.on('blur', () => {
    if (window && !window.webContents.isDevToolsOpened()) {
      window.hide();
    }
  });

  state.mainWindow = window;
  return window;
};

// Create tray factory function
const createTrayFactory = (state: AppState, createWindow: () => BrowserWindow) => (): Tray => {
  try {
    // Create tray icon - using a simple dot for better compatibility
    let icon;
    try {
      // Try to create a system icon first
      icon = nativeImage.createFromNamedImage('NSImageNameStatusAvailable');
      if (icon.isEmpty()) {
        throw new Error('Named image not available');
      }
      icon = icon.resize({ width: 16, height: 16 });
    } catch (iconError) {
      // Fallback: create a simple 16x16 icon programmatically
      console.log('Using fallback icon creation');
      icon = nativeImage.createEmpty();
    }
    
    const tray = new Tray(icon);
    console.log('Tray created successfully');
  
  // Set tooltip
  tray.setToolTip('Killall-Tofu - Infrastructure Auto-Destroyer');
  
  // Create context menu
  const contextMenu = Menu.buildFromTemplate([
    { 
      label: 'Active Infrastructure', 
      type: 'normal',
      enabled: false
    },
    { type: 'separator' },
    { 
      label: 'No active projects', 
      type: 'normal',
      enabled: false
    },
    { type: 'separator' },
    {
      label: 'Dashboard',
      type: 'normal',
      click: (): void => {
        createWindow();
      }
    },
    {
      label: 'Settings',
      type: 'normal',
      click: (): void => {
        // TODO: In the future, this should open a separate settings window
        // For now, it opens the main dashboard window which includes settings
        createWindow();
      }
    },
    { type: 'separator' },
    { 
      label: 'Quit Killall-Tofu', 
      type: 'normal',
      click: (): void => {
        app.quit();
      }
    }
  ]);
  
  tray.setContextMenu(contextMenu);
  
  // Handle tray clicks - show context menu instead of auto-opening window
  tray.on('click', () => {
    tray?.popUpContextMenu();
  });

    state.tray = tray;
    return tray;
  } catch (error) {
    console.error('Failed to create tray:', error);
    throw error;
  }
};

// IPC handlers setup function
const setupIPCHandlers = (state: AppState) => {
  // App operations
  ipcMain.on('app:quit', () => {
    app.quit();
  });

  ipcMain.on('app:minimize', () => {
    state.mainWindow?.minimize();
  });

  ipcMain.handle('app:openExternal', async (_event, url: string) => {
    // Validate URL before opening
    if (url.startsWith('http://') || url.startsWith('https://')) {
      await shell.openExternal(url);
    }
  });

  ipcMain.handle('app:getVersion', () => {
    return app.getVersion();
  });

  ipcMain.handle('app:checkForUpdates', async () => {
    // Placeholder for update checking logic
    return false;
  });

  // File operations
  ipcMain.handle('files:selectDirectory', async () => {
    const result = await dialog.showOpenDialog({
      properties: ['openDirectory']
    });
    return result.canceled ? null : result.filePaths[0];
  });

  ipcMain.handle('files:openLogsFolder', async () => {
    const logsPath = path.join(app.getPath('userData'), 'logs');
    await shell.openPath(logsPath);
  });

  // Project operations (placeholders for now)
  ipcMain.handle('projects:getAll', async () => {
    // TODO: Implement with database service
    return [];
  });

  ipcMain.handle('projects:getActive', async () => {
    // TODO: Implement with database service
    return [];
  });

  ipcMain.handle('projects:getByStatus', async (_event, _status) => {
    // TODO: Implement with database service
    return [];
  });

  ipcMain.handle('projects:cancel', async (_event, _projectId) => {
    // TODO: Implement with scheduler service
  });

  ipcMain.handle('projects:extend', async (_event, _projectId, _additionalTime) => {
    // TODO: Implement with scheduler service
  });

  ipcMain.handle('projects:destroy', async (_event, _projectId) => {
    // TODO: Implement with executor service
  });

  // Configuration operations (placeholders for now)
  ipcMain.handle('config:get', async () => {
    // TODO: Implement with config manager
    return null;
  });

  ipcMain.handle('config:update', async (_event, _config) => {
    // TODO: Implement with config manager
    return null;
  });

  ipcMain.handle('config:addWatchDirectory', async (_event, _path) => {
    // TODO: Implement with config manager
  });

  ipcMain.handle('config:removeWatchDirectory', async (_event, _path) => {
    // TODO: Implement with config manager
  });

  ipcMain.handle('config:resetToDefaults', async () => {
    // TODO: Implement with config manager
  });

  // Notification operations (placeholders for now)
  ipcMain.handle('notifications:test', async () => {
    // TODO: Implement with notifier service
  });
};

// Application initialization function
const initializeApp = () => {
  const state = createAppState();
  const createWindow = createWindowFactory(state);
  const createTray = createTrayFactory(state, createWindow);

  // Set up IPC handlers
  setupIPCHandlers(state);

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  app.whenReady().then(() => {
    console.log('Electron app ready, platform:', process.platform);
    
    // Don't show in dock on macOS
    if (process.platform === 'darwin' && app.dock) {
      console.log('Hiding dock icon on macOS');
      app.dock.hide();
    }
    
    console.log('Creating tray...');
    createTray();
    console.log('Tray creation completed');
  }).catch((error) => {
    console.error('App initialization failed:', error);
  });

  // Quit when all windows are closed, except on macOS where we want to keep the tray
  app.on('window-all-closed', () => {
    // On macOS, keep the app running even when all windows are closed
    // The tray icon allows users to interact with the app
    if (process.platform !== 'darwin') {
      // On other platforms, keep running for tray functionality
    }
  });

  app.on('activate', () => {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked, but for a menu bar app we handle this via tray
    createWindow();
  });

  // Prevent multiple instances
  const gotTheLock = app.requestSingleInstanceLock();
  if (!gotTheLock) {
    app.quit();
  } else {
    app.on('second-instance', () => {
      // Someone tried to run a second instance, focus our window instead
      if (state.mainWindow) {
        if (state.mainWindow.isMinimized()) state.mainWindow.restore();
        state.mainWindow.focus();
      } else {
        createWindow();
      }
    });
  }
};

// Initialize the application
initializeApp();